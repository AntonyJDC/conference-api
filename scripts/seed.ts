import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { initializeApp, cert } from 'firebase-admin/app';
import { getStorage } from 'firebase-admin/storage';
import path from 'path';
import fs from 'fs';
import { dummyEvents } from './events';
import EventModel from '../src/models/event.model';
import serviceAccount from '../serviceAccountKey.json';
import reviewModel from '../src/models/review.model';

dotenv.config();

// Inicializar Firebase
initializeApp({
    credential: cert(serviceAccount as any),
    storageBucket: process.env.FIREBASE_BUCKET,
});
const bucket = getStorage().bucket();

const commentSamples: { [key: string]: string[] } = {
    excellent: [
        '¬°Excelente evento! Todo estuvo perfectamente organizado.',
        'Una experiencia inolvidable, super√≥ mis expectativas.',
        'Sin duda volver√≠a a asistir. 10/10.',
        'Ambiente espectacular y contenido muy relevante.',
        'Los ponentes fueron incre√≠bles, muy preparados.',
        'Una log√≠stica impecable, puntual y fluida.',
        'Me encant√≥ cada parte del evento. Gracias.',
        'Incre√≠ble puesta en escena, fue m√°gico.',
        'Todo el equipo organizador merece felicitaciones.',
        'Evento de primera calidad, lo recomiendo a todos.',
    ],
    good: [
        'Muy buen evento, aunque hay algunos detalles que mejorar.',
        'Me gust√≥ mucho, aunque falt√≥ m√°s participaci√≥n del p√∫blico.',
        'Buena organizaci√≥n y contenido interesante.',
        'En general fue un evento agradable y provechoso.',
        'Los horarios se respetaron, buena se√±alizaci√≥n.',
        'Una experiencia enriquecedora, aunque con algunos fallos menores.',
        'Buen ambiente y atenci√≥n adecuada.',
        'Cumpli√≥ con lo que promet√≠a, volver√≠a.',
        'Algunas charlas fueron excelentes, otras normales.',
        'Buen lugar y buena energ√≠a del equipo organizador.',
    ],
    average: [
        'Fue un evento aceptable, sin muchos sobresaltos.',
        'No fue malo, pero tampoco destacable.',
        'Hubo partes muy buenas y otras aburridas.',
        'Falt√≥ m√°s interacci√≥n o dinamismo.',
        'Estuvo bien, pero se not√≥ improvisaci√≥n en algunos momentos.',
        'Ni bueno ni malo, simplemente correcto.',
        'Esperaba un poco m√°s por la publicidad que hicieron.',
        'Hubo retrasos y poca claridad en los horarios.',
        'Los espacios estaban algo desorganizados.',
        'El contenido fue regular, no muy profundo.',
    ],
    bad: [
        'No me gust√≥ mucho, hubo varios errores log√≠sticos.',
        'Poca organizaci√≥n y desinformaci√≥n general.',
        'Se not√≥ falta de planificaci√≥n y coordinaci√≥n.',
        'Los ponentes no estaban bien preparados.',
        'Falt√≥ puntualidad y orden en general.',
        'Demasiado largo para lo poco que ofrecieron.',
        'No cumpli√≥ mis expectativas, parec√≠a improvisado.',
        'Problemas de sonido y retrasos constantes.',
        'Mal se√±alizado y dif√≠cil de seguir.',
        'Esperaba algo mucho m√°s profesional.',
    ],
    terrible: [
        'Muy mal evento, una p√©rdida de tiempo total.',
        'Todo fue un caos desde el principio.',
        'No hab√≠a nadie que informara correctamente.',
        'Muy mala experiencia, no volver√≠a jam√°s.',
        'Retrasos, desorganizaci√≥n y contenido pobre.',
        'El lugar no era adecuado para el evento.',
        'No aprend√≠ nada √∫til, todo fue relleno.',
        'Una decepci√≥n total, esperaba mucho m√°s.',
        'Desastre total. Lo peor que he asistido.',
        'Ni siquiera los organizadores sab√≠an qu√© hacer.',
    ],
};

const generateReviews = (eventId: string): any[] => {
    const count = Math.floor(Math.random() * 8) + 3;
    const reviews = [];

    for (let i = 0; i < count; i++) {
        const rating = Math.floor(Math.random() * 5) + 1;
        let commentCategory: string;
        if (rating >= 5) commentCategory = 'excellent';
        else if (rating >= 4) commentCategory = 'good';
        else if (rating >= 3) commentCategory = 'average';
        else if (rating >= 2) commentCategory = 'bad';
        else commentCategory = 'terrible';

        const comments = commentSamples[commentCategory];
        const comment = comments[Math.floor(Math.random() * comments.length)];

        reviews.push({
            id: `${eventId}-review-${i + 1}`,
            eventId,
            rating,
            comment,
            createdAt: new Date().toISOString(),
        });
    }

    return reviews;
};


// Funci√≥n para subir la imagen si no existe a√∫n en Firebase
const uploadIfNotExists = async (fileName: string): Promise<string> => {
    const dest = `events/${fileName}`;
    const file = bucket.file(dest);

    const [exists] = await file.exists();
    if (!exists) {
        const localPath = path.resolve(__dirname, 'images', fileName);

        if (!fs.existsSync(localPath)) {
            throw new Error(`‚ùå Imagen no encontrada localmente: ${fileName}`);
        }

        await bucket.upload(localPath, {
            destination: dest,
            public: true,
            metadata: {
                cacheControl: 'public,max-age=31536000',
            },
        });

        console.log(`‚úÖ Subida: ${fileName}`);
    } else {
        console.log(`üü° Ya existe: ${fileName}`);
    }

    return `https://firebasestorage.googleapis.com/v0/b/${bucket.name}/o/events%2F${encodeURIComponent(fileName)}?alt=media`;
};

// Funci√≥n principal
const seed = async () => {
    try {
        await mongoose.connect(process.env.MONGO_URI || '');
        console.log('‚úÖ Conectado a MongoDB');

        await EventModel.deleteMany();
        console.log('üóë Eventos antiguos eliminados');
        await reviewModel.deleteMany();
        console.log('üóë Rese√±as antiguas eliminadas');

        const preparedEvents = [];

        for (const event of dummyEvents) {
            const imageUrl = await uploadIfNotExists(event.imageFileName);
            preparedEvents.push({
                ...event,
                imageUrl,
            });
        }

        await EventModel.insertMany(preparedEvents);
        console.log('üöÄ Eventos insertados con √©xito');


        const allReviews = preparedEvents.flatMap(event => generateReviews(event.id));
        await reviewModel.insertMany(allReviews);
        console.log(`üìù ${allReviews.length} rese√±as generadas e insertadas`);
        process.exit(0);
    } catch (err) {
        console.error('‚ùå Error:', err);
        process.exit(1);
    }
};

seed();
